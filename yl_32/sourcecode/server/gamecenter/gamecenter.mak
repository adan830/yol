# Generated by vc2mak. (c) 2012 simon<senoutouya@gmail.com>.
# Project - gamecenter

# 缺省配置
ifndef CFG
	CFG=debug
endif

# 编译器标记（若要做x86、x64的cross-compile请指定PLAT参数）
CC=gcc
CFLAGS=-pthread $(PLAT)
CXX=g++
CXXFLAGS=$(CFLAGS)
LD=$(CXX)
LDFLAGS:=$(CFLAGS)
AR=ar
ARFLAGS=rcs

# 工程配置表
ifeq "$(CFG)" "debug"
	CFLAGS+= -pipe -Wall -Wno-unknown-pragmas -Wno-unused -Wno-reorder -O0 -fexceptions -g -fstack-protector -DGAME_CENTER  -D_DEBUG -I. -I../../include -I../../include/serverbase -I../../../LibQrt/Include -I../../../devenv/include
	LDFLAGS+= -L../../../LibQrt/Lib/Win32 -L../../../devenv/lib/debug -L../../lib/debug
	LIBS=-Wl,-rpath,'$$ORIGIN' -Wl,--start-group -lgclogicbased -lonlinegamebased -lcored -lmysqlclient -Wl,--end-group -lm -ldl -lrt
	TARGET=../../product/debug/gamecenter/gamecenterd.elf
	VC_CONF_TYPE=typeApplication
endif

ifeq "$(CFG)" "release"
	CFLAGS+= -pipe -Wall -Wno-unknown-pragmas -Wno-unused -Wno-reorder -O2 -fexceptions -g -fstack-protector -DKD_OP_GAME_CENTER  -DNDEBUG -DKD_USE_JXEX_UNIFY -I. -I../../include -I../../include/serverbase -I../../../base/include -I../../../devenv/include
	LDFLAGS+= -L../../../base/lib/release/linuxso -L../../../base/lib/release -L../../../devenv/lib/release -L../../lib/release
	LIBS=-Wl,-rpath,'$$ORIGIN' -Wl,--start-group -lserverbase -lonlinegamebase -lgclogicbase -ldevbase -lcommon -lengine -lmysqlclient -Wl,--end-group -lm -ldl -lrt
	TARGET=../../product/release/gamecenter/gamecenter.elf
	VC_CONF_TYPE=typeApplication
endif

.PHONY: all
all: $(TARGET)

ifndef TARGET
	@echo "无编译目标！unrecognized \$$CFG '$(CFG)'"
	@exit 1
endif

%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $<
%.o: %.cc
	$(CXX) $(CXXFLAGS) -o $@ -c $<
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -o $@ -c $<
%.o: %.cxx
	$(CXX) $(CXXFLAGS) -o $@ -c $<

GAMECENTER.VCPROJ= \
	./gamecenter.rc \
	./gamecenterapp.cpp \
	./kg_censerver.cpp \
	./kgamecenter.cpp \
	./kgamecenter.h \
	./kgc_coordinatorclient.cpp \
	./kgc_coordinatorclient.h \
	./resource.h 

BASE-DEFINE= \
	../../include/serverbase/kgcbaseinterface.h \
	../../include/serverbase/kgcconfiginterface.h \
	../../include/serverbase/kgcmoduledef.h \
	../../include/serverbase/kgcmoduleinterface.h 

GCGATEWAY-LOADER.其他= \
	./kdatadef.h \
	./kgamecentereyes.cpp \
	./kgamecentereyes.h \
	./kgcconfig.cpp \
	./kgcconfig.h \
	./kmodulesetting.cpp \
	./kmodulesetting.h \
	./stdafx.h 

GCGATEWAY-LOADER.LOADER间通迅= \
	./kmempipesys.cpp \
	./kmempipesys.h 

GCGATEWAY-LOADER.GC基础接口实现= \
	./kgcquery.cpp \
	./kgcquery.h \
	./kgcserver.cpp \
	./kgcserver.h \
	./kinterfacemgr.cpp \
	./kinterfacemgr.h 

GCGATEWAY-LOADER.GC间连接接口实现= \
	./kconnectlocal.cpp \
	./kconnectlocal.h \
	./kconnectmgr.cpp \
	./kconnectmgr.h \
	./kconnectpipe.cpp \
	./kconnectpipe.h \
	./kconnectsocket.cpp \
	./kconnectsocket.h \
	./kgcinterface.cpp \
	./kgcinterface.h \
	./kgcinterfacedef.h \
	../../include/serverbase/kinterfacedef.h 

GCGATEWAY-LOADER.LOADER子进程= \
	./kloader.cpp \
	./kloader.h 

GCGATEWAY-LOADER.与GS的连接服务= \
	./ksocketserver.cpp \
	./ksocketserver.h 

GCGATEWAY-LOADER.基础逻辑模块接口= \
	../../include/serverbase/kgclogicbaseinterface.h \
	./kgclogicprovide.cpp \
	./kgclogicprovide.h 

GCGATEWAY-LOADER.数据库= \
	../../include/serverbase/kdbcallback.h \
	./kdbmanager.cpp \
	./kdbmanager.h 

GCGATEWAY-LOADER.共享内存= \
	./kkeysharemem.cpp \
	./kkeysharemem.h \
	./ksharememorybuffer.cpp \
	./ksharememorybuffer.h \
	./ksharememorypool.cpp \
	./ksharememorypool.h \
	./ksharememoryprovider.cpp \
	./ksharememoryprovider.h 

SRCS=$(GAMECENTER.VCPROJ) $(BASE-DEFINE) $(GCGATEWAY-LOADER.其他) $(GCGATEWAY-LOADER.LOADER间通迅) $(GCGATEWAY-LOADER.GC基础接口实现) $(GCGATEWAY-LOADER.GC间连接接口实现) $(GCGATEWAY-LOADER.LOADER子进程) $(GCGATEWAY-LOADER.与GS的连接服务) $(GCGATEWAY-LOADER.基础逻辑模块接口) $(GCGATEWAY-LOADER.数据库) $(GCGATEWAY-LOADER.共享内存) 

OBJS=$(patsubst %.cxx,%.o,$(patsubst %.cpp,%.o,$(patsubst %.cc,%.o,$(patsubst %.c,%.o,$(filter %.c %.cc %.cpp %.cxx,$(SRCS))))))

ifeq "$(VC_CONF_TYPE)" "typeApplication"
$(TARGET): $(OBJS)
	mkdir -p "$(dir $(TARGET))"
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
endif

.PHONY: clean
clean:
	-rm -f $(OBJS) gamecenter.dep  ../../product/debug/gamecenter/gamecenterd.elf ../../product/release/gamecenter/gamecenter.elf

.PHONY: depends
depends:
	-$(CXX) $(CXXFLAGS) -MM $(filter %.c %.cc %.cpp %.cxx,$(SRCS)) > gamecenter.dep

-include gamecenter.dep

